//  ---------------------------------------------------------------------------
//  <copyright file="TDSStreamTests.cs" company="Microsoft">
//     Copyright (c) Microsoft Corporation.  All rights reserved.
//  </copyright>
//  ---------------------------------------------------------------------------

namespace TDSClient.UnitTests.TDS.Comms
{
    using System;
    using System.IO;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using TDSClient.TDS.Comms;

    [TestClass]
    public class TDSStreamTests
    {
        [TestMethod]
        public void ReadFromTDSStream_SinglePacket()
        {
            var innerStream = new MemoryStream();

            innerStream.Write(new byte[]
            {  
                0x12, 0x01, 0x00, 0x2F, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1A, 0x00, 0x06, 0x01, 0x00, 0x20,
                0x00, 0x01, 0x02, 0x00, 0x21, 0x00, 0x01, 0x03, 0x00, 0x22, 0x00, 0x04, 0x04, 0x00, 0x26, 0x00,
                0x01, 0xFF, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0xB8, 0x0D, 0x00, 0x00, 0x01
            });
            innerStream.Seek(0, SeekOrigin.Begin);

            var stream = new TDSStream(innerStream, new TimeSpan(0, 0, 30), 4096);
            byte[] resultBuffer = null;
            var curOffset = 0;

            do
            {
                Array.Resize(ref resultBuffer, curOffset + 4096);
                curOffset += stream.Read(resultBuffer, curOffset, 4096);
            }
            while (!stream.InboundMessageTerminated);

            Array.Resize(ref resultBuffer, curOffset);

            Console.WriteLine(string.Join(' ', resultBuffer));

            CollectionAssert.AreEqual(
                new byte[] 
                {
                    0x00, 0x00, 0x1A, 0x00, 0x06, 0x01, 0x00, 0x20, 0x00, 0x01, 0x02, 0x00, 0x21, 0x00, 0x01, 0x03,
                    0x00, 0x22, 0x00, 0x04, 0x04, 0x00, 0x26, 0x00, 0x01, 0xFF, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x01, 0x00, 0xB8, 0x0D, 0x00, 0x00, 0x01
                },
                resultBuffer);
        }

        [TestMethod]
        public void ReadFromTDSStream_MultiplePackets()
        {
            var innerStream = new MemoryStream();

            innerStream.Write(new byte[]
            {
                0x12, 0x00, 0x00, 0x10, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1A, 0x00, 0x06, 0x01, 0x00, 0x20,
                0x12, 0x00, 0x00, 0x10, 0x00, 0x00, 0x02, 0x00, 0x00, 0x01, 0x02, 0x00, 0x21, 0x00, 0x01, 0x03,
                0x12, 0x00, 0x00, 0x10, 0x00, 0x00, 0x03, 0x00, 0x00, 0x22, 0x00, 0x04, 0x04, 0x00, 0x26, 0x00,
                0x12, 0x00, 0x00, 0x10, 0x00, 0x00, 0x04, 0x00, 0x01, 0xFF, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x12, 0x01, 0x00, 0x0f, 0x00, 0x00, 0x05, 0x00, 0x01, 0x00, 0xB8, 0x0D, 0x00, 0x00, 0x01
            });
            innerStream.Seek(0, SeekOrigin.Begin);

            var stream = new TDSStream(innerStream, new TimeSpan(0, 0, 30), 16);
            byte[] resultBuffer = null;
            var curOffset = 0;

            do
            {
                Array.Resize(ref resultBuffer, curOffset + 2);
                curOffset += stream.Read(resultBuffer, curOffset, 2);
            }
            while (!stream.InboundMessageTerminated);

            Array.Resize(ref resultBuffer, curOffset);
          
            Console.WriteLine(string.Join(' ', resultBuffer));

            CollectionAssert.AreEqual(
                new byte[] 
                {
                    0x00, 0x00, 0x1A, 0x00, 0x06, 0x01, 0x00, 0x20, 0x00, 0x01, 0x02, 0x00, 0x21, 0x00, 0x01, 0x03,
                    0x00, 0x22, 0x00, 0x04, 0x04, 0x00, 0x26, 0x00, 0x01, 0xFF, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x01, 0x00, 0xB8, 0x0D, 0x00, 0x00, 0x01
                },
                resultBuffer);
        }

        [TestMethod]
        public void WriteToTDSStream_SinglePacket()
        {
            var innerStream = new MemoryStream();
            var stream = new TDSStream(innerStream, new TimeSpan(0, 0, 30), 4096)
            {
                CurrentOutboundMessageType = TDSClient.TDS.Header.TDSMessageType.PreLogin
            };

            stream.Write(new byte[]
            {
                0x00, 0x00, 0x1A, 0x00, 0x06, 0x01, 0x00, 0x20, 0x00, 0x01, 0x02, 0x00, 0x21, 0x00, 0x01, 0x03,
                0x00, 0x22, 0x00, 0x04, 0x04, 0x00, 0x26, 0x00, 0x01, 0xFF, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0xB8, 0x0D, 0x00, 0x00, 0x01
            });

            CollectionAssert.AreEqual(
                new byte[]
                {
                    0x12, 0x01, 0x00, 0x2F, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1A, 0x00, 0x06, 0x01, 0x00, 0x20,
                    0x00, 0x01, 0x02, 0x00, 0x21, 0x00, 0x01, 0x03, 0x00, 0x22, 0x00, 0x04, 0x04, 0x00, 0x26, 0x00,
                    0x01, 0xFF, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0xB8, 0x0D, 0x00, 0x00, 0x01
                },
                innerStream.ToArray());
        }

        [TestMethod]
        public void WriteToTDSStream_MultiplePackets()
        {
            var innerStream = new MemoryStream();
            var stream = new TDSStream(innerStream, new TimeSpan(0, 0, 30), 16)
            {
                CurrentOutboundMessageType = TDSClient.TDS.Header.TDSMessageType.PreLogin
            };

            stream.Write(new byte[]
            {
                0x00, 0x00, 0x1A, 0x00, 0x06, 0x01, 0x00, 0x20, 0x00, 0x01, 0x02, 0x00, 0x21, 0x00, 0x01, 0x03,
                0x00, 0x22, 0x00, 0x04, 0x04, 0x00, 0x26, 0x00, 0x01, 0xFF, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0xB8, 0x0D, 0x00, 0x00, 0x01
            });

            CollectionAssert.AreEqual(
                new byte[]
                {
                    0x12, 0x00, 0x00, 0x10, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1A, 0x00, 0x06, 0x01, 0x00, 0x20,
                    0x12, 0x00, 0x00, 0x10, 0x00, 0x00, 0x02, 0x00, 0x00, 0x01, 0x02, 0x00, 0x21, 0x00, 0x01, 0x03,
                    0x12, 0x00, 0x00, 0x10, 0x00, 0x00, 0x03, 0x00, 0x00, 0x22, 0x00, 0x04, 0x04, 0x00, 0x26, 0x00,
                    0x12, 0x00, 0x00, 0x10, 0x00, 0x00, 0x04, 0x00, 0x01, 0xFF, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x12, 0x01, 0x00, 0x0f, 0x00, 0x00, 0x05, 0x00, 0x01, 0x00, 0xB8, 0x0D, 0x00, 0x00, 0x01
                },
                innerStream.ToArray());
        }
    }
}
